diff --git a/meson.build b/meson.build
index f9fe4e7..a3d55c4 100644
--- a/meson.build
+++ b/meson.build
@@ -23,13 +23,11 @@ libavutil = dependency('libavutil', version: '>= 56.70.100')
 libswresample = dependency('libswresample', version: '>= 3.9.100')
 libswscale = dependency('libswscale', version: '>= 5.9.100')
 
-libass = dependency('libass', version: '>= 0.12.2')
 pthreads = dependency('threads')
 
-# the dependency order of libass -> ffmpeg is necessary due to
+# the dependency order of libavcodec -> ffmpeg is necessary due to
 # static linking symbol resolution between fontconfig and MinGW
-dependencies = [libass,
-                libavcodec,
+dependencies = [libavcodec,
                 libavfilter,
                 libavformat,
                 libavutil,
@@ -44,7 +42,7 @@ features = {
     'gpl': get_option('gpl'),
     'jpegxl': libavformat.version().version_compare('>= 59.27.100'),
     'avif_muxer': libavformat.version().version_compare('>= 59.24.100'),
-    'libass': true,
+    'libass': false,
     'threads': true,
 }
 
diff --git a/player/command.c b/player/command.c
index 0eb13a7..f7a17c8 100644
--- a/player/command.c
+++ b/player/command.c
@@ -27,7 +27,7 @@
 #include <pthread.h>
 #include <sys/types.h>
 
-#include <ass/ass.h>
+// #include <ass/ass.h>
 #include <libavutil/avstring.h>
 #include <libavutil/common.h>
 
@@ -3310,7 +3310,8 @@ static int mp_property_ffmpeg(void *ctx, struct m_property *prop,
 static int mp_property_libass_version(void *ctx, struct m_property *prop,
                                       int action, void *arg)
 {
-    return m_property_int64_ro(action, arg, ass_library_version());
+    // return m_property_int64_ro(action, arg, ass_library_version());
+    return m_property_int64_ro(action, arg, 0);
 }
 
 static int mp_property_platform(void *ctx, struct m_property *prop,
diff --git a/sub/sd_ass.c b/sub/sd_ass.c
index e4e5652..0e55f7f 100644
--- a/sub/sd_ass.c
+++ b/sub/sd_ass.c
@@ -22,7 +22,7 @@
 #include <limits.h>
 
 #include <libavutil/common.h>
-#include <ass/ass.h>
+// #include <ass/ass.h>
 
 #include "mpv_talloc.h"
 
@@ -205,41 +205,41 @@ static void enable_output(struct sd *sd, bool enable)
 
 static void assobjects_init(struct sd *sd)
 {
-    struct sd_ass_priv *ctx = sd->priv;
-    struct mp_subtitle_opts *opts = sd->opts;
+//     struct sd_ass_priv *ctx = sd->priv;
+//     struct mp_subtitle_opts *opts = sd->opts;
 
-    ctx->ass_library = mp_ass_init(sd->global, sd->opts->sub_style, sd->log);
-    ass_set_extract_fonts(ctx->ass_library, opts->use_embedded_fonts);
+//     ctx->ass_library = mp_ass_init(sd->global, sd->opts->sub_style, sd->log);
+//     ass_set_extract_fonts(ctx->ass_library, opts->use_embedded_fonts);
 
-    add_subtitle_fonts(sd);
+//     add_subtitle_fonts(sd);
 
-    if (opts->ass_style_override)
-        ass_set_style_overrides(ctx->ass_library, opts->ass_force_style_list);
+//     if (opts->ass_style_override)
+//         ass_set_style_overrides(ctx->ass_library, opts->ass_force_style_list);
 
-    ctx->ass_track = ass_new_track(ctx->ass_library);
-    ctx->ass_track->track_type = TRACK_TYPE_ASS;
+//     ctx->ass_track = ass_new_track(ctx->ass_library);
+//     ctx->ass_track->track_type = TRACK_TYPE_ASS;
 
-    ctx->shadow_track = ass_new_track(ctx->ass_library);
-    ctx->shadow_track->PlayResX = 384;
-    ctx->shadow_track->PlayResY = 288;
-    mp_ass_add_default_styles(ctx->shadow_track, opts);
+//     ctx->shadow_track = ass_new_track(ctx->ass_library);
+//     ctx->shadow_track->PlayResX = 384;
+//     ctx->shadow_track->PlayResY = 288;
+//     mp_ass_add_default_styles(ctx->shadow_track, opts);
 
-    char *extradata = sd->codec->extradata;
-    int extradata_size = sd->codec->extradata_size;
-    if (ctx->converter) {
-        extradata = lavc_conv_get_extradata(ctx->converter);
-        extradata_size = extradata ? strlen(extradata) : 0;
-    }
-    if (extradata)
-        ass_process_codec_private(ctx->ass_track, extradata, extradata_size);
+//     char *extradata = sd->codec->extradata;
+//     int extradata_size = sd->codec->extradata_size;
+//     if (ctx->converter) {
+//         extradata = lavc_conv_get_extradata(ctx->converter);
+//         extradata_size = extradata ? strlen(extradata) : 0;
+//     }
+//     if (extradata)
+//         ass_process_codec_private(ctx->ass_track, extradata, extradata_size);
 
-    mp_ass_add_default_styles(ctx->ass_track, opts);
+//     mp_ass_add_default_styles(ctx->ass_track, opts);
 
-#if LIBASS_VERSION >= 0x01302000
-    ass_set_check_readorder(ctx->ass_track, sd->opts->sub_clear_on_seek ? 0 : 1);
-#endif
+// #if LIBASS_VERSION >= 0x01302000
+//     ass_set_check_readorder(ctx->ass_track, sd->opts->sub_clear_on_seek ? 0 : 1);
+// #endif
 
-    enable_output(sd, true);
+//     enable_output(sd, true);
 }
 
 static void assobjects_destroy(struct sd *sd)
